environment = dev
shop = ro-scc-shop-b2b
log.level {
# TRACE, DEBUG, INFO, WARN, ERROR
#     api = TRACE
    api = DEBUG
#     api = INFO
    console = INFO
#     console = DEBUG
}

usernames {
    webshops = "Daniel, DanielModified"
    marketing_app = "MarketingAppUser, MarketingAppUser2"
    not_authenticated = "I, new_user, NewUser, newUser"
}

webdriver {
    driver = chrome # allowed values: firefox, ie, edge, chrome, phantomjs, remote, provided; passed as ""-Dwebdriver.driver=chrome"
#     driver = remote # for Selenium Grid [and some cloud solutions?], see https://serenity-bdd.github.io/theserenitybook/latest/remote.html
#     driver = provided # for remote cloud service (BrowserStack etc.)
#     driver = provided
    provided.type = mydriver # for remote cloud service
    provided.mydriver = de.tg.pangaea.specification.extensions.RemoteWebDriverSetup # for remote cloud service
    autodownload = true # Missing webdrivers are downloaded automatically by WebDriverManager. NOTE: Newer Serenity versions integrate with Selenium 4.8.0, which has WebDriverManager built-in
    # for Selenium Grid ()or cloud solutions in some cases):
    capabilities {
        timeouts {
          script = 30000
          pageLoad = 60000
          implicit = 2000
        }

        "goog:chromeOptions" {
            # prevent DriverConfigurationError:
            args = [
                "remote-allow-origins=*"
                , "disable-dev-shm-usage" # overcome limited resource problems
            ]
        }
        pageLoadStrategy = normal # standard setting
    }
}


serenity {
  extension.packages = de.tg.pangaea.specification.extensions
  # doc: https://serenity-bdd.github.io/theserenitybook/latest/serenity-system-properties.html
  project.name = "#{shop} Living Documentation for #{environment}" # This is the project name which will appear as the report title
  browser.width = 1450
  browser.height = 1000
  take {
    screenshots = AFTER_EACH_STEP # alternatives: FOR_EACH_ACTION, BEFORE_AND_AFTER_EACH_STEP, FOR_FAILURES, DISABLED, ...
    screenshot.for.interactions = FOR_FAILURES
    screenshot.for.noscreenshots = DISABLED
  }
  resized.image.width = 800 # If set, screenshots are resized to this size. Useful to save space.

  restart.browser.for.each = never # can be: example, scenario, story, feature, never
  issue.tracker.url = "https://company.com/issuetracker/{0}"
  exclude.unrelated.requirements.of.type = "capability, feature, theme, requirement" #  theme and requirement probably ignored
  fail.on = org.openqa.selenium.TimeoutException
  compromised.on = "java.util.concurrent.TimeoutException"

  verbose.steps = true
  logging = VERBOSE # possible values: VERBOSE, NORMAL, QUIET
  console.headings = NORMAL # don't print bulky banners; values: ASCII, NORMAL, QUIET
  console.colors = false

  dry.run = false # true means: skip executing code

  reports.show.step.details = true # true means detailed information in the test result tables
  generate.csv.reports = false
}

environments {
    all {
        home.page = "#{shop.url}"
    }

    dev {
        ro-scc-shop-b2b {
            url = "https://tg:tg@dev-selgros-romania.pantheonsite.io"
            price_db_connection_string = "jdbc:postgresql://pgdatadev002.postgres.database.azure.com:5432/custompricesdev?sslmode=require"
            price_db_user = "customprices@pgdatadev002"
            price_db_password = "H3g0uoDwrV%YpMa7Mt"
            azure.search_index.url = "https://orderset-search.search.windows.net/indexes/rob2b-products2"
             users {
                Daniel {
                    email = "tg.autotest+scc-ro.dev.1@gmail.com"
                    password = "Test1234;"
                    warehouse = 145
                    customer_number = QARODEV01
                }
             }
        }
    }
}


report {
    customfields.environment = "#{environment}"
    customfields.shop = "#{shop}"
    tagtypes = capability # capability,feature
    show.releases = true
    accesibility = true # true means use enhanced charts with lines
}
